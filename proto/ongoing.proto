/*
    GSP for the Taurion blockchain game
    Copyright (C) 2020  Autonomous Worlds Ltd

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto2";

package pxd.proto;

/**
 * Data representing an on-going prospection by a character.
 */
message OngoingProspection
{

  /* There are no fields required.  The only piece of data is which region
     is being prospected, but that is implicit from the character's
     position on the map.

     This message is simply used as a flag to indicate that an ongoing
     operation is prospecting.  */

}

/**
 * Data representing an "armour repair" operation in progress.
 */
message ArmourRepair
{

  /* As with OngoingProspection, this is just a signal message for the
     op oneof, at least for the time being.  */

}

/**
 * Data about an ongoing blueprint copy operation.  While a blueprint is being
 * copied, it is "removed" from the main inventory, and only given back together
 * with the copy when the operation is done.
 */
message BlueprintCopy
{

  /** The account doing the copying.  Also the owner of the blueprints.  */
  optional string account = 1;

  /** The blueprint item type being copied (the original).  */
  optional string original_type = 2;

  /** The item type of the copy that will be produced.  */
  optional string copy_type = 3;

  /** The number of copies being made.  */
  optional uint32 num_copies = 4;

}

/**
 * Data about an ongoing item or vehicle construction.  If it is based on
 * an original blueprint, then the blueprint will be taken away temporarily and
 * given back together with the constructed items.  Blueprint copies and
 * resources required for the construction are always just removed when the
 * operation starts (and thus not related to the operation state).
 *
 * Construction from an original produces the items "in series", which means
 * that we schedule an update for each single item finished and give them out
 * one after the other while the operation is still going on.  If constructing
 * from blueprint copies, all of them are done in parallel, and just one update
 * is done after the construction time and all items are given out at once.
 */
message ItemConstruction
{

  /** The account doing the operation, which will receive items when done.  */
  optional string account = 1;

  /** The constructed item.  */
  optional string output_type = 2;

  /**
   * The number of items still to be constructed.  If this is done based on
   * an original blueprint, we will update the operation after each produced
   * item, give that item out, decrement the number here, and re-schedule
   * an update.
   */
  optional uint32 num_items = 3;

  /**
   * If this construction is based on an original blueprint, then this is the
   * blueprint type used.  After it is done (or if the building is destroyed),
   * one item of this type is also given back.
   */
  optional string original_type = 4;

}

/**
 * An operation to finish building construction (i.e. upgrade it from
 * a foundation to the full building).
 */
message BuildingConstruction
{

  /* No extra data is needed.  The building and end-height are already general
     fields of any ongoing operation, and the resources to take away on
     completion are known as well from the building type.  */

}

/**
 * Data about an ongoing operation.
 */
message OngoingOperation
{

  /**
   * The block height when the operation started.  This is useful for
   * the frontend to show (e.g. calculate progress).
   */
  optional uint32 start_height = 1;

  /** The ongoing operation itself, which can be one of several types.  */
  oneof op
  {
    OngoingProspection prospection = 101;
    ArmourRepair armour_repair = 102;
    BlueprintCopy blueprint_copy = 103;
    ItemConstruction item_construction = 104;
    BuildingConstruction building_construction = 105;
  }

  /* The database stores extra data directly in columns:
      - block height when the next processing is required
      - associated character ID (if any)
      - associated building ID (if any)
  */

}
