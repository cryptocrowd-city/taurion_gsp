/*
    GSP for the Taurion blockchain game
    Copyright (C) 2019-2020  Autonomous Worlds Ltd

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto2";
option cc_enable_arenas = true;

import "proto/geometry.proto";

package pxd.proto;

/**
 * An "active" movement of a character.  Movement is specified by a list
 * of waypoints, which will be visited in order and have to be apart
 * only by principal directions.
 */
message Movement
{

  /**
   * The waypoints that will still be visited.  While they are traversed,
   * already visited points are removed from this list.  In other words,
   * the first element will always be the current target of the
   * character.  When this list becomes empty, then it stops moving.
   */
  repeated HexCoord waypoints = 1;

  /**
   * If set, then the character chooses to travel at the minimum of this value
   * and its actual speed.  This can be used to reduce travel speed for faster
   * vehicles to stay around slower ones in a convoy.
   */
  optional uint32 chosen_speed = 2;

}

/**
 * Additional data for movement, which is stored separately in the database
 * and not as part of the broader "character proto".  This is the data that
 * is expected to change frequently, e.g. potentially on every turn without
 * explicit moves being sent by the player.
 */
message VolatileMovement
{

  /** Partial progress towards the next tile.  */
  optional uint32 partial_step = 1;

  /**
   * Number of turns for which the character has been blocked by an obstacle
   * in its (already computed) path.  This is used to stop movement after a
   * certain number of tries, rather than trying forever.
   */
  optional uint32 blocked_turns = 2;

}
