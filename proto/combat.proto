/*
    GSP for the Taurion blockchain game
    Copyright (C) 2019-2020  Autonomous Worlds Ltd

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto2";
option cc_enable_arenas = true;

import "proto/modifier.proto";

package pxd.proto;

/**
 * Identifier for a target of attacks.  This can be either a character (in a
 * vehicle on the map) or a building.
 */
message TargetId
{

  /**
   * Different types of target.  The type determines where the data is stored
   * in the database and how it is accessed.
   */
  enum Type
  {
    INVALID_TYPE = 0;
    /* The numeric values below are used to sort TargetKey instances, which
       are expected to match the sorting order used in some DB queries.  */
    TYPE_BUILDING = 1;
    TYPE_CHARACTER = 2;
  }

  /** The type of this target.  */
  optional Type type = 1;

  /**
   * The database ID of this target entity (based on its type).  Absence of
   * this field means that the target is "empty" / null / there is no target.
   */
  optional uint64 id = 2;

}

/**
 * Modifications done to a combat entity's stats due to attacks (e.g.
 * slowing or range reduction).
 */
message CombatEffects
{

  /** Modification to the speed.  */
  optional StatModifier speed = 1;

  /** Modification to the range.  */
  optional StatModifier range = 2;

  /** Modification to the hit chance of attacks from this fighter.  */
  optional StatModifier hit_chance = 3;

  /** Modification to the shield regeneration rate.  */
  optional StatModifier shield_regen = 4;

  /**
   * If set, then the affected fighter ignores the friendly/enemy
   * classification and just considers everyone a valid target for
   * both normal and friendly attacks (and similarly affects everyone
   * with AoE attacks of either type).
   */
  optional bool mentecon = 5;

}

/**
 * An attack that a character or building has.  This data is either hardcoded
 * (for buildings) or derived from other stuff (like equipped weapons).  But
 * it is stored in the current form in the game state as a sort of "cache"
 * while processing combat in each round.  (It only needs to be updated
 * when an explicit action is done by the owner of a character.)
 */
message Attack
{

  /**
   * The range of the attack (as L1 distance on our hex grid).  This may be
   * zero in which case it affects only enemies on the same tile.
   *
   * If the value is missing entirely instead, it implies that there will not
   * be a concrete "target", which is the case e.g. for AoE effects
   * around the attacker itself.
   */
  optional uint32 range = 1;

  /**
   * The size of the AoE for this attack, around the selected target (if range
   * is present) or the attacker (if range is not present).  If this is not
   * present, then it means that only the target itself is affected.
   */
  optional uint32 area = 2;

  /**
   * Data about the damage a particular attack does.
   */
  message Damage
  {
    /* Maximum and minimum damage of the attack.  The actual damage will be
       chosen uniformly from the both-inclusive range.  */
    optional uint32 min = 1;
    optional uint32 max = 2;

    /**
     * If this is set, it specifies the factor (as percent) that the attack
     * does damage to armour specifically.  If not, 100% (no modification)
     * is assumed.
     */
    optional uint32 armour_percent = 3;

    /** The factor (as percent) that this attack does damage to shields.  */
    optional uint32 shield_percent = 4;

    /**
     * "Size" of the attack's weapon for hit/miss chance computation.
     * See target_size on CombatData.
     */
    optional uint32 weapon_size = 5;
  }

  /** If this attack does damage, the stats for it.  */
  optional Damage damage = 3;

  /** If this attack has non-damage effects, the stats for it.  */
  optional CombatEffects effects = 4;

  /**
   * If true, then HP drained through this attack's damage will be given
   * back to the attacker (if any).  This works per HP type, i.e. shield
   * HP drained are added to the shield (if not full) and armour HP are
   * added to the armour (if not full).
   */
  optional bool gain_hp = 5;

  /**
   * If true, then this attack affects friendlies instead of enemies.
   * This is used for positive effects, like improved shield regeneration.
   */
  optional bool friendlies = 6;

}

/**
 * Stats for the self-destruct ability of an entity (when the entity is
 * destroyed, AoE damage is dealt to enemies in range).
 */
message SelfDestruct
{

  /** The AoE range of the attack.  */
  optional uint32 area = 1;

  /** The damage done.  */
  optional Attack.Damage damage = 2;

}

/**
 * Stats for a boost to combat stats that is in effect when a character
 * has low armour HP (i.e. "final breath" attack).
 */
message LowHpBoost
{

  /** The percentage of armour HP at which it activates.  */
  optional uint32 max_hp_percent = 1;

  /** Boost to damage.  */
  optional StatModifier damage = 2;

  /** Boost to range.  */
  optional StatModifier range = 3;

}

/**
 * Small utility message to hold stats about HP (both the permanent
 * armour-based ones and the regenerating shield).
 */
message HP
{

  /** The "permanent" armour-based HP.  */
  optional uint32 armour = 1;

  /** The regenerating, shield-based HP.  */
  optional uint32 shield = 2;

  /**
   * Partially regenerated HP in 1/1000 HP units.  When it reaches
   * 1000 for shield or armour, the "actual" HP are incremented accordingly.
   *
   * This field is only present for the current HP of a fighter, not the
   * maximum HP in its RegenData.
   */
  optional HP mhp = 3;

}

/**
 * Data relevant for HP regeneration.  This is split out from the main
 * combat data, because it needs to be accessed for every fighter all the
 * time to figure out if they need regeneration.
 */
message RegenData
{

  /** Maximum HP of the fighter.  */
  optional HP max_hp = 1;

  /** Regeneration rate of HPs in "milli HP per block".  */
  optional HP regeneration_mhp = 2;

}

/**
 * All data related to combat that a fighter entity (character or building) has.
 * This only includes basic properties of the fighter and not more dynamic
 * data like the current target or the current HP, nor specific data that
 * is frequently accessed like HP regeneration.
 */
message CombatData
{

  /** The offensive attacks the figher has.  */
  repeated Attack attacks = 1;

  /** Any low-HP boosts for the fighter.  */
  repeated LowHpBoost low_hp_boosts = 2;

  /** Any self-destruct attacks this fighter has.  */
  repeated SelfDestruct self_destructs = 3;

  /**
   * Reduction applied to any damage received (e.g. from the "armour hardener"
   * upgrade fitment).
   */
  optional StatModifier received_damage_modifier = 4;

  /**
   * Modification (e.g. boost) to the hit chance of any attacks made by
   * this fighter.
   */
  optional StatModifier hit_chance_modifier = 5;

  /**
   * "Size" of the fighter as a target, i.e. for hit/miss chance
   * computation.  If this is missing or at least as large as the
   * corresponding size of the attack, then the base chance (without any
   * modifiers) is 100%.  If the target size is lower, the chance is
   * proportionally lowered.
   */
  optional uint32 target_size = 6;

}
