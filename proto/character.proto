/*
    GSP for the Taurion blockchain game
    Copyright (C) 2019-2020  Autonomous Worlds Ltd

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto2";
option cc_enable_arenas = true;

import "proto/combat.proto";
import "proto/modifier.proto";
import "proto/movement.proto";

package pxd.proto;

/**
 * Data about the mining state of a character.
 */
message MiningData
{

  /**
   * Stats about the speed for mining (which is random based on a distribution
   * from these parameters).
   */
  message Speed
  {

    /** The minimum units per block.  */
    optional uint64 min = 1;

    /** The maximum units per block.  */
    optional uint64 max = 2;

  }

  /** The mining speed parameters.  */
  optional Speed rate = 1;

  /** Set to true if the character is currently mining.  */
  optional bool active = 2;

}

/**
 * Data about mobile refining capabilities of a character.
 */
message MobileRefinery
{

  /**
   * The "inefficiency factor" of mobile refining.  Refining in a mobile
   * refinery costs the same vCHI fee and produces the same outputs as a
   * normal refining step, but uses up more input ore per step.  This is
   * specified by the modifier here.
   */
  optional StatModifier input = 1;

}

/**
 * The state of one character in the game.  Note that this does not include
 * data fields that are stored directly in database columns, namely those on
 * which the database keeps indices.
 */
message Character
{

  /** The vehicle (as item type) this character is using.  */
  optional string vehicle = 1;

  /** Fitments placed on the vehicle.  */
  repeated string fitments = 2;

  /** Active movement of the character, if any.  */
  optional Movement movement = 3;

  /**
   * Static combat data for thie character.  That data is derived from other
   * information (e.g. equipped weapons, current vehicle), but it is cached
   * here for easy computation of combat.  The data here changes only
   * through explicit actions done by the owner.
   */
  optional CombatData combat_data = 4;

  /**
   * If the character is currently busy, then this is the ID of the
   * corresponding ongoing operation.
   */
  optional uint64 ongoing = 5;

  /** The character's mining data, if it can mine.  */
  optional MiningData mining = 6;

  /**
   * The character's prospecting rate, if it can prospect.  This is
   * the number of blocks it takes them to finish prospection.
   */
  optional uint32 prospecting_blocks = 7;

  /** Movement speed of the character.  */
  optional uint32 speed = 8;

  /** Total cargo space the character has.  */
  optional uint64 cargo_space = 9;

  /**
   * If this is set, the character can do mobile refining (and the stats for
   * it are given here).
   */
  optional MobileRefinery refining = 10;

  /* Fields that are stored directly in the database and thus not part of the
     encoded protocol buffer:

     - int ID
     - string owner
     - int faction
     - position on the map
     - building the character is in
     - building the character wants to enter
     - volatile movement proto (partial step, blocked for counter)
     - current HP proto
     - HP regeneration data proto
     - selected target as TargetId proto (if any)
     - inventory proto
  */

}
