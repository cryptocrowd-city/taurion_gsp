/*
    GSP for the Taurion blockchain game
    Copyright (C) 2020  Autonomous Worlds Ltd

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto2";

import "proto/combat.proto";
import "proto/inventory.proto";

package pxd.proto;

/**
 * A geometrical transformation applied to the building's shape (e.g.
 * for rotating it on the map).  This does not include the shift of all
 * tiles to the building's centre.
 */
message ShapeTransformation
{

  /**
   * Number of clock-wise rotation steps about 60 degrees the base shape
   * is rotated around the building centre.  This can go from 0 to 5.
   */
  optional uint32 rotation_steps = 1;

}

/**
 * The state of one building on the map.  (There is additional data stored
 * for it directly in the database, as well as extra data stored in other
 * database tables like inventories or trade orders.)
 */
message Building
{

  /** The transformation applied to the building's base shape.  */
  optional ShapeTransformation shape_trafo = 1;

  /** True if this is just a foundation for now (and not the full building).  */
  optional bool foundation = 2;

  /**
   * The inventory with materials for construction of the full building,
   * while this is just a foundation.
   */
  optional Inventory construction_inventory = 3;

  /**
   * If this is a foundation being upgraded to full building right now,
   * then this is the ID of the ongoing operation corresponding to it.
   */
  optional uint64 ongoing_construction = 4;

  /**
   * Static combat data for this building (besides regeneration).  This is
   * mostly based on the building type, but may change if the building is
   * upgraded or the account gains skills.
   */
  optional CombatData combat_data = 5;

  /**
   * The service fee that users need to pay to the building owner for using
   * services in the building.  This is a percentage of the service's base
   * fee (the burnt amount).
   */
  optional uint32 service_fee_percent = 6;

  /**
   * The fee charged by the building owner for trades on the building's DEX.
   * This is in basis points (1/100 of a percent) and paid by the seller
   * from the received Cubits.
   */
  optional int32 dex_fee_bps = 7;

  /**
   * Data about the building age, i.e. the block heights when it was founded
   * and finished.
   */
  message AgeData
  {

    /** Block height when it was founded.  */
    optional uint32 founded_height = 1;

    /** Block height when it was finished.  */
    optional uint32 finished_height = 2;

  }

  /** Age data for this building.  */
  optional AgeData age_data = 8;

}
